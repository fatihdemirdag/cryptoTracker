unit uRESTResponseHelper;



interface



uses
  System.Classes, System.JSON.Readers, System.JSON.Types;


type
  TRESTResponseReader = class
  private
    jsonReader: TJSONTextReader;
    textReader: TStringReader;

    function GotoNext(path: string): boolean;

  protected
  public
    constructor Create(response: string);

    function GetNextValueAsDouble(path: string; var value: Double): Boolean;
    function GetNextValueAsInteger(path: string): Integer;
    function GetNextValueAsString(path: string): string;
    procedure SetResponse(response: string);

  end;



implementation



{ TRESTResponseReader }



constructor TRESTResponseReader.Create(response: string);
begin
  SetResponse(response);
end;



function TRESTResponseReader.GetNextValueAsDouble(path: string): Double;
begin
  if GotoNext(path) then
    result := jsonReader.ReadAsDouble;
end;



function TRESTResponseReader.GetNextValueAsInteger(path: string): Integer;
begin
  if GotoNext(path) then
    result := jsonReader.ReadAsInteger;
end;



function TRESTResponseReader.GetNextValueAsString(path: string): string;
begin
  if GotoNext(path) then
    result := jsonReader.ReadAsString;
end;



function TRESTResponseReader.GotoNext(path: string): boolean;
var
  readResult: boolean;
begin
  result := false;
  repeat
    result := jsonReader.Read;
  until (((jsonReader.TokenType = TJsonToken.PropertyName) and (jsonReader.path = path)) or (not readResult));
end;



procedure TRESTResponseReader.SetResponse(response: string);
var
  token: TJsonToken;
begin
  if textReader <> nil then
    textReader.Destroy;
  textReader := TStringReader.Create(response);

  if jsonReader <> nil then
    jsonReader.Destroy;
  jsonReader := TJSONTextReader.Create(textReader);
end;



end.
